// <auto-generated />
using System;
using JobApplicationApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JobApplicationApi.Migrations
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20240730105644_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JobApplicationApi.Models.JobExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Company")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<string>("Responsibilities")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("JobExperiences", (string)null);
                });

            modelBuilder.Entity("JobApplicationApi.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LanguageName")
                        .HasColumnType("text");

                    b.Property<string>("Proficiency")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Languages", (string)null);
                });

            modelBuilder.Entity("JobApplicationApi.Models.Membership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("MembershipName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Memberships", (string)null);
                });

            modelBuilder.Entity("JobApplicationApi.Models.Reference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ReferenceCompany")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceEmail")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceName")
                        .HasColumnType("text");

                    b.Property<string>("ReferencePhone")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("References", (string)null);
                });

            modelBuilder.Entity("JobApplicationApi.Models.SkillCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CertificateFile")
                        .HasColumnType("text");

                    b.Property<string>("CertificateName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SkillCertificates", (string)null);
                });

            modelBuilder.Entity("JobApplicationApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Criminal")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CriminalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CriminalReason")
                        .HasColumnType("text");

                    b.Property<string>("CriminalRecordFile")
                        .HasColumnType("text");

                    b.Property<string>("CvFile")
                        .HasColumnType("text");

                    b.Property<string>("Disability")
                        .HasColumnType("text");

                    b.Property<string>("EducationLevel")
                        .HasColumnType("text");

                    b.Property<string>("Gpa")
                        .HasColumnType("text");

                    b.Property<DateTime?>("GraduateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Health")
                        .HasColumnType("text");

                    b.Property<string>("HealthStat")
                        .HasColumnType("text");

                    b.Property<string>("Highschool")
                        .HasColumnType("text");

                    b.Property<string>("Hobbies")
                        .HasColumnType("text");

                    b.Property<DateTime?>("MilitaryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MilitaryStatus")
                        .HasColumnType("text");

                    b.Property<bool>("Policy")
                        .HasColumnType("boolean");

                    b.Property<string>("Program")
                        .HasColumnType("text");

                    b.Property<string>("Skills")
                        .HasColumnType("text");

                    b.Property<string>("University")
                        .HasColumnType("text");

                    b.Property<int>("UserDetailsId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserDetailsId")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("JobApplicationApi.Models.UserDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Birthplace")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MarriageStatus")
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .HasColumnType("text");

                    b.Property<string>("Postal")
                        .HasColumnType("text");

                    b.Property<string>("TcNo")
                        .HasColumnType("text");

                    b.Property<string>("TelNum")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserDetails", (string)null);
                });

            modelBuilder.Entity("JobApplicationApi.Models.JobExperience", b =>
                {
                    b.HasOne("JobApplicationApi.Models.User", "User")
                        .WithMany("JobExperiences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobApplicationApi.Models.Language", b =>
                {
                    b.HasOne("JobApplicationApi.Models.User", "User")
                        .WithMany("Languages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobApplicationApi.Models.Membership", b =>
                {
                    b.HasOne("JobApplicationApi.Models.User", "User")
                        .WithMany("Memberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobApplicationApi.Models.Reference", b =>
                {
                    b.HasOne("JobApplicationApi.Models.User", "User")
                        .WithMany("References")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobApplicationApi.Models.SkillCertificate", b =>
                {
                    b.HasOne("JobApplicationApi.Models.User", "User")
                        .WithMany("SkillCertificates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobApplicationApi.Models.User", b =>
                {
                    b.HasOne("JobApplicationApi.Models.UserDetails", "UserDetails")
                        .WithOne()
                        .HasForeignKey("JobApplicationApi.Models.User", "UserDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("JobApplicationApi.Models.User", b =>
                {
                    b.Navigation("JobExperiences");

                    b.Navigation("Languages");

                    b.Navigation("Memberships");

                    b.Navigation("References");

                    b.Navigation("SkillCertificates");
                });
#pragma warning restore 612, 618
        }
    }
}
